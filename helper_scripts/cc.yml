ccs: ["bbr", "vegas", "cubic"]
# monitoring statistics
cc: bbr # starting cc
cc_monitoring_path: "/home/mike/cc_monitoring/cc_" # start path to save the logging file of the cc data
random_cc: false # should replace the cc during runtime, ignored in the code

cc_scoring_path: "/home/mike/cc_scoring/cc_score_" # start path to save the scoring file of the abr data

# function: q(Ci) - lambda * abs(q(Ci) - q(Ci-1)) - mu * rebuffer_time_i, supported scorings: ssim, bit_rate

# scoring_type -> scoring_function_type
scoring_function_type: "ssim" # the scoring method
buffer_length_coef: 100.0
quality_change_qoef: 1.0

# scoring_type: "bit_rate"
# scoring_mu: 4.3
# scoring_lambda: 1.0

model_path: "/home/mike/puffer/cc_cpp_weights/weights_0_abr_linear_bba_v2.0_ssim.pt" 
# "/weights_3_abr_linear_bba_v1.0_True.pt"
# "/home/mike/puffer/cc_cpp_weights/weights_3_abr_mpc_v1.0_ssim.pt" 
# "/home/mike/puffer/cc_cpp_weights/weights_3_abr_linear_bba_v1.0_True.pt" # weights_7_abr_linear_bba_v3.0.pt" the path to the trained model
history_size: 8 # how much previous chunks does the nn remember

# random_sample_size -> sample_size

random_sample_size: 100 # how much from previous chunks it gets as input
abr_time: true # replace cc each abr or once every _ time
nn_roundup: 500 # control the rate of change cc in case abr_time is false
python_weights_path: '/home/mike/puffer/cc_weights/' # start path to the place where to store the nn weights for python
cpp_weights_path: '/home/mike/puffer/cc_cpp_weights/' # start path to the place where to store the nn weights for cpp
predict_score: true # learn score or the params