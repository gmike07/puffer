// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http_record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "http_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MahimahiProtobufs {

namespace {

const ::google::protobuf::Descriptor* HTTPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HTTPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HTTPHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HTTPHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestResponse_Scheme_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_http_5frecord_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_http_5frecord_2eproto() {
  protobuf_AddDesc_http_5frecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "http_record.proto");
  GOOGLE_CHECK(file != NULL);
  HTTPMessage_descriptor_ = file->message_type(0);
  static const int HTTPMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, first_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, body_),
  };
  HTTPMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HTTPMessage_descriptor_,
      HTTPMessage::default_instance_,
      HTTPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(HTTPMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, _internal_metadata_),
      -1);
  HTTPHeader_descriptor_ = file->message_type(1);
  static const int HTTPHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, value_),
  };
  HTTPHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HTTPHeader_descriptor_,
      HTTPHeader::default_instance_,
      HTTPHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(HTTPHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, _internal_metadata_),
      -1);
  RequestResponse_descriptor_ = file->message_type(2);
  static const int RequestResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, response_),
  };
  RequestResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestResponse_descriptor_,
      RequestResponse::default_instance_,
      RequestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, _internal_metadata_),
      -1);
  RequestResponse_Scheme_descriptor_ = RequestResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_http_5frecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HTTPMessage_descriptor_, &HTTPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HTTPHeader_descriptor_, &HTTPHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestResponse_descriptor_, &RequestResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_http_5frecord_2eproto() {
  delete HTTPMessage::default_instance_;
  delete HTTPMessage_reflection_;
  delete HTTPHeader::default_instance_;
  delete HTTPHeader_reflection_;
  delete RequestResponse::default_instance_;
  delete RequestResponse_reflection_;
}

void protobuf_AddDesc_http_5frecord_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_http_5frecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021http_record.proto\022\021MahimahiProtobufs\"^"
    "\n\013HTTPMessage\022\022\n\nfirst_line\030\001 \001(\014\022-\n\006hea"
    "der\030\002 \003(\0132\035.MahimahiProtobufs.HTTPHeader"
    "\022\014\n\004body\030\003 \001(\014\"(\n\nHTTPHeader\022\013\n\003key\030\001 \001("
    "\014\022\r\n\005value\030\002 \001(\014\"\350\001\n\017RequestResponse\022\n\n\002"
    "ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\0229\n\006scheme\030\003 \001(\0162)"
    ".MahimahiProtobufs.RequestResponse.Schem"
    "e\022/\n\007request\030\004 \001(\0132\036.MahimahiProtobufs.H"
    "TTPMessage\0220\n\010response\030\005 \001(\0132\036.MahimahiP"
    "rotobufs.HTTPMessage\"\035\n\006Scheme\022\010\n\004HTTP\020\001"
    "\022\t\n\005HTTPS\020\002", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http_record.proto", &protobuf_RegisterTypes);
  HTTPMessage::default_instance_ = new HTTPMessage();
  HTTPHeader::default_instance_ = new HTTPHeader();
  RequestResponse::default_instance_ = new RequestResponse();
  HTTPMessage::default_instance_->InitAsDefaultInstance();
  HTTPHeader::default_instance_->InitAsDefaultInstance();
  RequestResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_http_5frecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_http_5frecord_2eproto {
  StaticDescriptorInitializer_http_5frecord_2eproto() {
    protobuf_AddDesc_http_5frecord_2eproto();
  }
} static_descriptor_initializer_http_5frecord_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPMessage::kFirstLineFieldNumber;
const int HTTPMessage::kHeaderFieldNumber;
const int HTTPMessage::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPMessage::HTTPMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MahimahiProtobufs.HTTPMessage)
}

void HTTPMessage::InitAsDefaultInstance() {
}

HTTPMessage::HTTPMessage(const HTTPMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MahimahiProtobufs.HTTPMessage)
}

void HTTPMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  first_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HTTPMessage::~HTTPMessage() {
  // @@protoc_insertion_point(destructor:MahimahiProtobufs.HTTPMessage)
  SharedDtor();
}

void HTTPMessage::SharedDtor() {
  first_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HTTPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HTTPMessage_descriptor_;
}

const HTTPMessage& HTTPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_5frecord_2eproto();
  return *default_instance_;
}

HTTPMessage* HTTPMessage::default_instance_ = NULL;

HTTPMessage* HTTPMessage::New(::google::protobuf::Arena* arena) const {
  HTTPMessage* n = new HTTPMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MahimahiProtobufs.HTTPMessage)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_first_line()) {
      first_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_body()) {
      body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  header_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HTTPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MahimahiProtobufs.HTTPMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes first_line = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // repeated .MahimahiProtobufs.HTTPHeader header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(input->IncrementRecursionDepth());
         parse_loop_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_header;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (tag == 26) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MahimahiProtobufs.HTTPMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MahimahiProtobufs.HTTPMessage)
  return false;
#undef DO_
}

void HTTPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MahimahiProtobufs.HTTPMessage)
  // optional bytes first_line = 1;
  if (has_first_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->first_line(), output);
  }

  // repeated .MahimahiProtobufs.HTTPHeader header = 2;
  for (unsigned int i = 0, n = this->header_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(i), output);
  }

  // optional bytes body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MahimahiProtobufs.HTTPMessage)
}

::google::protobuf::uint8* HTTPMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MahimahiProtobufs.HTTPMessage)
  // optional bytes first_line = 1;
  if (has_first_line()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->first_line(), target);
  }

  // repeated .MahimahiProtobufs.HTTPHeader header = 2;
  for (unsigned int i = 0, n = this->header_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->header(i), false, target);
  }

  // optional bytes body = 3;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MahimahiProtobufs.HTTPMessage)
  return target;
}

int HTTPMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MahimahiProtobufs.HTTPMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional bytes first_line = 1;
    if (has_first_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_line());
    }

    // optional bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  // repeated .MahimahiProtobufs.HTTPHeader header = 2;
  total_size += 1 * this->header_size();
  for (int i = 0; i < this->header_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MahimahiProtobufs.HTTPMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HTTPMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MahimahiProtobufs.HTTPMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MahimahiProtobufs.HTTPMessage)
    MergeFrom(*source);
  }
}

void HTTPMessage::MergeFrom(const HTTPMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MahimahiProtobufs.HTTPMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  header_.MergeFrom(from.header_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_line()) {
      set_has_first_line();
      first_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_line_);
    }
    if (from.has_body()) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HTTPMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MahimahiProtobufs.HTTPMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPMessage::CopyFrom(const HTTPMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MahimahiProtobufs.HTTPMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPMessage::IsInitialized() const {

  return true;
}

void HTTPMessage::Swap(HTTPMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPMessage::InternalSwap(HTTPMessage* other) {
  first_line_.Swap(&other->first_line_);
  header_.UnsafeArenaSwap(&other->header_);
  body_.Swap(&other->body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HTTPMessage_descriptor_;
  metadata.reflection = HTTPMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HTTPMessage

// optional bytes first_line = 1;
bool HTTPMessage::has_first_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HTTPMessage::set_has_first_line() {
  _has_bits_[0] |= 0x00000001u;
}
void HTTPMessage::clear_has_first_line() {
  _has_bits_[0] &= ~0x00000001u;
}
void HTTPMessage::clear_first_line() {
  first_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_line();
}
 const ::std::string& HTTPMessage::first_line() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.HTTPMessage.first_line)
  return first_line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPMessage::set_first_line(const ::std::string& value) {
  set_has_first_line();
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.HTTPMessage.first_line)
}
 void HTTPMessage::set_first_line(const char* value) {
  set_has_first_line();
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MahimahiProtobufs.HTTPMessage.first_line)
}
 void HTTPMessage::set_first_line(const void* value, size_t size) {
  set_has_first_line();
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MahimahiProtobufs.HTTPMessage.first_line)
}
 ::std::string* HTTPMessage::mutable_first_line() {
  set_has_first_line();
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.HTTPMessage.first_line)
  return first_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HTTPMessage::release_first_line() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.HTTPMessage.first_line)
  clear_has_first_line();
  return first_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPMessage::set_allocated_first_line(::std::string* first_line) {
  if (first_line != NULL) {
    set_has_first_line();
  } else {
    clear_has_first_line();
  }
  first_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_line);
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.HTTPMessage.first_line)
}

// repeated .MahimahiProtobufs.HTTPHeader header = 2;
int HTTPMessage::header_size() const {
  return header_.size();
}
void HTTPMessage::clear_header() {
  header_.Clear();
}
const ::MahimahiProtobufs::HTTPHeader& HTTPMessage::header(int index) const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.HTTPMessage.header)
  return header_.Get(index);
}
::MahimahiProtobufs::HTTPHeader* HTTPMessage::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.HTTPMessage.header)
  return header_.Mutable(index);
}
::MahimahiProtobufs::HTTPHeader* HTTPMessage::add_header() {
  // @@protoc_insertion_point(field_add:MahimahiProtobufs.HTTPMessage.header)
  return header_.Add();
}
::google::protobuf::RepeatedPtrField< ::MahimahiProtobufs::HTTPHeader >*
HTTPMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:MahimahiProtobufs.HTTPMessage.header)
  return &header_;
}
const ::google::protobuf::RepeatedPtrField< ::MahimahiProtobufs::HTTPHeader >&
HTTPMessage::header() const {
  // @@protoc_insertion_point(field_list:MahimahiProtobufs.HTTPMessage.header)
  return header_;
}

// optional bytes body = 3;
bool HTTPMessage::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HTTPMessage::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
void HTTPMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
void HTTPMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
 const ::std::string& HTTPMessage::body() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.HTTPMessage.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPMessage::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.HTTPMessage.body)
}
 void HTTPMessage::set_body(const char* value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MahimahiProtobufs.HTTPMessage.body)
}
 void HTTPMessage::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MahimahiProtobufs.HTTPMessage.body)
}
 ::std::string* HTTPMessage::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.HTTPMessage.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HTTPMessage::release_body() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.HTTPMessage.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPMessage::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.HTTPMessage.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPHeader::kKeyFieldNumber;
const int HTTPHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPHeader::HTTPHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MahimahiProtobufs.HTTPHeader)
}

void HTTPHeader::InitAsDefaultInstance() {
}

HTTPHeader::HTTPHeader(const HTTPHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MahimahiProtobufs.HTTPHeader)
}

void HTTPHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HTTPHeader::~HTTPHeader() {
  // @@protoc_insertion_point(destructor:MahimahiProtobufs.HTTPHeader)
  SharedDtor();
}

void HTTPHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HTTPHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HTTPHeader_descriptor_;
}

const HTTPHeader& HTTPHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_5frecord_2eproto();
  return *default_instance_;
}

HTTPHeader* HTTPHeader::default_instance_ = NULL;

HTTPHeader* HTTPHeader::New(::google::protobuf::Arena* arena) const {
  HTTPHeader* n = new HTTPHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MahimahiProtobufs.HTTPHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HTTPHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MahimahiProtobufs.HTTPHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MahimahiProtobufs.HTTPHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MahimahiProtobufs.HTTPHeader)
  return false;
#undef DO_
}

void HTTPHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MahimahiProtobufs.HTTPHeader)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MahimahiProtobufs.HTTPHeader)
}

::google::protobuf::uint8* HTTPHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MahimahiProtobufs.HTTPHeader)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MahimahiProtobufs.HTTPHeader)
  return target;
}

int HTTPHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MahimahiProtobufs.HTTPHeader)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MahimahiProtobufs.HTTPHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HTTPHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MahimahiProtobufs.HTTPHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MahimahiProtobufs.HTTPHeader)
    MergeFrom(*source);
  }
}

void HTTPHeader::MergeFrom(const HTTPHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MahimahiProtobufs.HTTPHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HTTPHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MahimahiProtobufs.HTTPHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPHeader::CopyFrom(const HTTPHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MahimahiProtobufs.HTTPHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPHeader::IsInitialized() const {

  return true;
}

void HTTPHeader::Swap(HTTPHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPHeader::InternalSwap(HTTPHeader* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HTTPHeader_descriptor_;
  metadata.reflection = HTTPHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HTTPHeader

// optional bytes key = 1;
bool HTTPHeader::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HTTPHeader::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void HTTPHeader::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void HTTPHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& HTTPHeader::key() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.HTTPHeader.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPHeader::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.HTTPHeader.key)
}
 void HTTPHeader::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MahimahiProtobufs.HTTPHeader.key)
}
 void HTTPHeader::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MahimahiProtobufs.HTTPHeader.key)
}
 ::std::string* HTTPHeader::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.HTTPHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HTTPHeader::release_key() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.HTTPHeader.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.HTTPHeader.key)
}

// optional bytes value = 2;
bool HTTPHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HTTPHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void HTTPHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void HTTPHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& HTTPHeader::value() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.HTTPHeader.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPHeader::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.HTTPHeader.value)
}
 void HTTPHeader::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MahimahiProtobufs.HTTPHeader.value)
}
 void HTTPHeader::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MahimahiProtobufs.HTTPHeader.value)
}
 ::std::string* HTTPHeader::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.HTTPHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HTTPHeader::release_value() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.HTTPHeader.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HTTPHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.HTTPHeader.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestResponse_Scheme_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResponse_Scheme_descriptor_;
}
bool RequestResponse_Scheme_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestResponse_Scheme RequestResponse::HTTP;
const RequestResponse_Scheme RequestResponse::HTTPS;
const RequestResponse_Scheme RequestResponse::Scheme_MIN;
const RequestResponse_Scheme RequestResponse::Scheme_MAX;
const int RequestResponse::Scheme_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestResponse::kIpFieldNumber;
const int RequestResponse::kPortFieldNumber;
const int RequestResponse::kSchemeFieldNumber;
const int RequestResponse::kRequestFieldNumber;
const int RequestResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestResponse::RequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MahimahiProtobufs.RequestResponse)
}

void RequestResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::MahimahiProtobufs::HTTPMessage*>(&::MahimahiProtobufs::HTTPMessage::default_instance());
  response_ = const_cast< ::MahimahiProtobufs::HTTPMessage*>(&::MahimahiProtobufs::HTTPMessage::default_instance());
}

RequestResponse::RequestResponse(const RequestResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MahimahiProtobufs.RequestResponse)
}

void RequestResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  scheme_ = 1;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestResponse::~RequestResponse() {
  // @@protoc_insertion_point(destructor:MahimahiProtobufs.RequestResponse)
  SharedDtor();
}

void RequestResponse::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void RequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResponse_descriptor_;
}

const RequestResponse& RequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_5frecord_2eproto();
  return *default_instance_;
}

RequestResponse* RequestResponse::default_instance_ = NULL;

RequestResponse* RequestResponse::New(::google::protobuf::Arena* arena) const {
  RequestResponse* n = new RequestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MahimahiProtobufs.RequestResponse)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
    scheme_ = 1;
    if (has_request()) {
      if (request_ != NULL) request_->::MahimahiProtobufs::HTTPMessage::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::MahimahiProtobufs::HTTPMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MahimahiProtobufs.RequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MahimahiProtobufs.RequestResponse.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_scheme;
        break;
      }

      // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
      case 3: {
        if (tag == 24) {
         parse_scheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MahimahiProtobufs::RequestResponse_Scheme_IsValid(value)) {
            set_scheme(static_cast< ::MahimahiProtobufs::RequestResponse_Scheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // optional .MahimahiProtobufs.HTTPMessage request = 4;
      case 4: {
        if (tag == 34) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_response;
        break;
      }

      // optional .MahimahiProtobufs.HTTPMessage response = 5;
      case 5: {
        if (tag == 42) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MahimahiProtobufs.RequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MahimahiProtobufs.RequestResponse)
  return false;
#undef DO_
}

void RequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MahimahiProtobufs.RequestResponse)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MahimahiProtobufs.RequestResponse.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->scheme(), output);
  }

  // optional .MahimahiProtobufs.HTTPMessage request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->request_, output);
  }

  // optional .MahimahiProtobufs.HTTPMessage response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MahimahiProtobufs.RequestResponse)
}

::google::protobuf::uint8* RequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MahimahiProtobufs.RequestResponse)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MahimahiProtobufs.RequestResponse.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
  if (has_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->scheme(), target);
  }

  // optional .MahimahiProtobufs.HTTPMessage request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->request_, false, target);
  }

  // optional .MahimahiProtobufs.HTTPMessage response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MahimahiProtobufs.RequestResponse)
  return target;
}

int RequestResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MahimahiProtobufs.RequestResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scheme());
    }

    // optional .MahimahiProtobufs.HTTPMessage request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .MahimahiProtobufs.HTTPMessage response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MahimahiProtobufs.RequestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MahimahiProtobufs.RequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MahimahiProtobufs.RequestResponse)
    MergeFrom(*source);
  }
}

void RequestResponse::MergeFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MahimahiProtobufs.RequestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_scheme()) {
      set_scheme(from.scheme());
    }
    if (from.has_request()) {
      mutable_request()->::MahimahiProtobufs::HTTPMessage::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::MahimahiProtobufs::HTTPMessage::MergeFrom(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MahimahiProtobufs.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResponse::CopyFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MahimahiProtobufs.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResponse::IsInitialized() const {

  return true;
}

void RequestResponse::Swap(RequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestResponse::InternalSwap(RequestResponse* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(scheme_, other->scheme_);
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestResponse_descriptor_;
  metadata.reflection = RequestResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestResponse

// optional string ip = 1;
bool RequestResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& RequestResponse::ip() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.RequestResponse.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestResponse::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.RequestResponse.ip)
}
 void RequestResponse::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MahimahiProtobufs.RequestResponse.ip)
}
 void RequestResponse::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MahimahiProtobufs.RequestResponse.ip)
}
 ::std::string* RequestResponse::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.RequestResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestResponse::release_ip() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.RequestResponse.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.RequestResponse.ip)
}

// optional uint32 port = 2;
bool RequestResponse::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestResponse::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestResponse::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 RequestResponse::port() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.RequestResponse.port)
  return port_;
}
 void RequestResponse::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.RequestResponse.port)
}

// optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
bool RequestResponse::has_scheme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestResponse::set_has_scheme() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestResponse::clear_has_scheme() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestResponse::clear_scheme() {
  scheme_ = 1;
  clear_has_scheme();
}
 ::MahimahiProtobufs::RequestResponse_Scheme RequestResponse::scheme() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.RequestResponse.scheme)
  return static_cast< ::MahimahiProtobufs::RequestResponse_Scheme >(scheme_);
}
 void RequestResponse::set_scheme(::MahimahiProtobufs::RequestResponse_Scheme value) {
  assert(::MahimahiProtobufs::RequestResponse_Scheme_IsValid(value));
  set_has_scheme();
  scheme_ = value;
  // @@protoc_insertion_point(field_set:MahimahiProtobufs.RequestResponse.scheme)
}

// optional .MahimahiProtobufs.HTTPMessage request = 4;
bool RequestResponse::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestResponse::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestResponse::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestResponse::clear_request() {
  if (request_ != NULL) request_->::MahimahiProtobufs::HTTPMessage::Clear();
  clear_has_request();
}
const ::MahimahiProtobufs::HTTPMessage& RequestResponse::request() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.RequestResponse.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::MahimahiProtobufs::HTTPMessage* RequestResponse::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::MahimahiProtobufs::HTTPMessage;
  }
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.RequestResponse.request)
  return request_;
}
::MahimahiProtobufs::HTTPMessage* RequestResponse::release_request() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.RequestResponse.request)
  clear_has_request();
  ::MahimahiProtobufs::HTTPMessage* temp = request_;
  request_ = NULL;
  return temp;
}
void RequestResponse::set_allocated_request(::MahimahiProtobufs::HTTPMessage* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.RequestResponse.request)
}

// optional .MahimahiProtobufs.HTTPMessage response = 5;
bool RequestResponse::has_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestResponse::set_has_response() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestResponse::clear_response() {
  if (response_ != NULL) response_->::MahimahiProtobufs::HTTPMessage::Clear();
  clear_has_response();
}
const ::MahimahiProtobufs::HTTPMessage& RequestResponse::response() const {
  // @@protoc_insertion_point(field_get:MahimahiProtobufs.RequestResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::MahimahiProtobufs::HTTPMessage* RequestResponse::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::MahimahiProtobufs::HTTPMessage;
  }
  // @@protoc_insertion_point(field_mutable:MahimahiProtobufs.RequestResponse.response)
  return response_;
}
::MahimahiProtobufs::HTTPMessage* RequestResponse::release_response() {
  // @@protoc_insertion_point(field_release:MahimahiProtobufs.RequestResponse.response)
  clear_has_response();
  ::MahimahiProtobufs::HTTPMessage* temp = response_;
  response_ = NULL;
  return temp;
}
void RequestResponse::set_allocated_response(::MahimahiProtobufs::HTTPMessage* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:MahimahiProtobufs.RequestResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MahimahiProtobufs

// @@protoc_insertion_point(global_scope)
